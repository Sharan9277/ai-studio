name: Performance Monitoring

on:
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger
  
env:
  NODE_VERSION: '18'

jobs:
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Serve application
        run: |
          npm install -g serve
          serve -s build -l 3000 &
          sleep 5
          
      - name: Run Lighthouse audit
        run: |
          npm install -g lighthouse
          lighthouse http://localhost:3000 \
            --output-path=./lighthouse-results.html \
            --output=html \
            --chrome-flags="--headless" \
            --quiet
            
      - name: Extract Lighthouse scores
        run: |
          npm install -g lighthouse
          lighthouse http://localhost:3000 \
            --output-path=./lighthouse-scores.json \
            --output=json \
            --chrome-flags="--headless" \
            --quiet
            
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: |
            lighthouse-results.html
            lighthouse-scores.json
          retention-days: 30
          
      - name: Performance Budget Check
        run: |
          PERFORMANCE_SCORE=$(cat lighthouse-scores.json | jq '.categories.performance.score * 100')
          ACCESSIBILITY_SCORE=$(cat lighthouse-scores.json | jq '.categories.accessibility.score * 100') 
          BEST_PRACTICES_SCORE=$(cat lighthouse-scores.json | jq '.categories["best-practices"].score * 100')
          SEO_SCORE=$(cat lighthouse-scores.json | jq '.categories.seo.score * 100')
          
          echo "Performance: $PERFORMANCE_SCORE"
          echo "Accessibility: $ACCESSIBILITY_SCORE"
          echo "Best Practices: $BEST_PRACTICES_SCORE"
          echo "SEO: $SEO_SCORE"
          
          # Fail if scores are below threshold
          if (( $(echo "$PERFORMANCE_SCORE < 90" | bc -l) )); then
            echo "‚ùå Performance score is below 90"
            exit 1
          fi
          
          if (( $(echo "$ACCESSIBILITY_SCORE < 95" | bc -l) )); then
            echo "‚ùå Accessibility score is below 95"
            exit 1
          fi
          
          if (( $(echo "$BEST_PRACTICES_SCORE < 90" | bc -l) )); then
            echo "‚ùå Best Practices score is below 90"
            exit 1
          fi
          
          echo "‚úÖ All Lighthouse scores meet requirements"
          
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Analyze bundle size
        run: |
          npm install -g bundlesize
          bundlesize
          
      - name: Bundle size report
        run: |
          npm install -g webpack-bundle-analyzer
          npx webpack-bundle-analyzer build/static/js/*.js --report --mode static --report-filename bundle-report.html
          
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: bundle-report.html
          retention-days: 30
          
  web-vitals-monitoring:
    name: Web Vitals Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
        
      - name: Run Web Vitals tests
        run: |
          npx playwright test e2e/performance/performance-smoke.spec.ts \
            --project=chromium \
            --reporter=json:web-vitals-results.json
            
      - name: Process Web Vitals data
        run: |
          echo "Processing Web Vitals metrics..."
          # Extract and format metrics from test results
          cat web-vitals-results.json | jq '.suites[].tests[] | select(.title | contains("performance")) | {title: .title, status: .status, duration: .duration}'
          
      - name: Upload Web Vitals results
        uses: actions/upload-artifact@v4
        with:
          name: web-vitals-results
          path: web-vitals-results.json
          retention-days: 30
          
  accessibility-monitoring:
    name: Accessibility Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
        
      - name: Run accessibility audit
        run: |
          npx playwright test e2e/accessibility.spec.ts \
            --project=chromium \
            --reporter=json:accessibility-results.json
            
      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-monitoring-results
          path: accessibility-results.json
          retention-days: 30
          
  performance-regression-detection:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    needs: [lighthouse-audit, bundle-analysis]
    
    steps:
      - name: Download current results
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results
          
      - name: Download previous results
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results-previous
        continue-on-error: true
        
      - name: Compare performance metrics
        run: |
          if [ -f lighthouse-scores-previous.json ]; then
            CURRENT_PERF=$(cat lighthouse-scores.json | jq '.categories.performance.score')
            PREVIOUS_PERF=$(cat lighthouse-scores-previous.json | jq '.categories.performance.score')
            
            REGRESSION=$(echo "$PREVIOUS_PERF - $CURRENT_PERF" | bc)
            REGRESSION_PERCENT=$(echo "$REGRESSION * 100" | bc)
            
            echo "Performance change: $REGRESSION_PERCENT%"
            
            if (( $(echo "$REGRESSION > 0.05" | bc -l) )); then
              echo "‚ö†Ô∏è  Performance regression detected!"
              echo "Current: $CURRENT_PERF, Previous: $PREVIOUS_PERF"
              # Could send alert here
            else
              echo "‚úÖ No significant performance regression"
            fi
          else
            echo "No previous results to compare against"
          fi
          
      - name: Store current results as previous
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results-previous
          path: lighthouse-scores.json
          retention-days: 7
          
  notify-results:
    name: Notify Performance Results
    runs-on: ubuntu-latest
    needs: [lighthouse-audit, bundle-analysis, web-vitals-monitoring, accessibility-monitoring]
    if: always()
    
    steps:
      - name: Performance Summary
        run: |
          echo "üìä Daily Performance Monitoring Summary"
          echo "======================================"
          echo "Date: $(date)"
          echo ""
          echo "Jobs Status:"
          echo "- Lighthouse Audit: ${{ needs.lighthouse-audit.result }}"
          echo "- Bundle Analysis: ${{ needs.bundle-analysis.result }}"
          echo "- Web Vitals: ${{ needs.web-vitals-monitoring.result }}"
          echo "- Accessibility: ${{ needs.accessibility-monitoring.result }}"
          echo ""
          
          if [[ "${{ needs.lighthouse-audit.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  Lighthouse audit failed - check performance scores"
          fi
          
          if [[ "${{ needs.bundle-analysis.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  Bundle size exceeded limits"
          fi
          
          if [[ "${{ needs.web-vitals-monitoring.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  Web Vitals monitoring detected issues"
          fi
          
          if [[ "${{ needs.accessibility-monitoring.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  Accessibility monitoring detected issues"
          fi
          
          echo ""
          echo "Check artifacts for detailed reports."