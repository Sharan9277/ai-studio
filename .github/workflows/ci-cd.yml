name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  
jobs:
  # Static Analysis and Linting
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        continue-on-error: false
        
      - name: Run TypeScript type check
        run: npx tsc --noEmit
        
      - name: Check code formatting
        run: npx prettier --check .
        
  # Unit and Integration Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false
        
      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unit-tests
          name: unit-tests
          
  # Build and Bundle Analysis
  build-and-analyze:
    name: Build and Bundle Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Analyze bundle size
        run: |
          npm install -g bundlesize
          bundlesize
        continue-on-error: true
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 7
          
  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, build-and-analyze]
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7
          
  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-and-analyze]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
        
      - name: Run performance tests
        run: npx playwright test e2e/performance/ --project=chromium
        env:
          CI: true
          
      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: test-results/
          retention-days: 7
          
  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [build-and-analyze]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
        
      - name: Run accessibility tests
        run: npx playwright test e2e/accessibility.spec.ts --project=chromium
        env:
          CI: true
          
      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results
          path: test-results/
          retention-days: 7
          
  # Visual Regression Tests
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [build-and-analyze]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
        
      - name: Run visual regression tests
        run: npx playwright test e2e/visual-regression.spec.ts --project=chromium
        env:
          CI: true
          
      - name: Upload visual test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression-results
          path: |
            test-results/
            test-results/screenshots/
          retention-days: 7
          
  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Run dependency vulnerability scan
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'
        
  # Code Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [
      lint-and-type-check, 
      unit-tests, 
      build-and-analyze, 
      e2e-tests, 
      performance-tests,
      accessibility-tests,
      security-scan
    ]
    
    steps:
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: ./coverage
        continue-on-error: true
        
      - name: Quality Gate Check
        run: |
          echo "All tests passed! ðŸŽ‰"
          echo "âœ… Linting and type checking"
          echo "âœ… Unit tests with coverage"
          echo "âœ… Build successful"
          echo "âœ… E2E tests across browsers"
          echo "âœ… Performance tests"
          echo "âœ… Accessibility tests"
          echo "âœ… Security scan"
          echo "Ready for deployment! ðŸš€"
          
  # Deployment (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/
          
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Build files ready in build/ directory"
          # Add your deployment commands here
          # Example: aws s3 sync build/ s3://your-staging-bucket
          
      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging..."
          # Add staging smoke tests here
          # Example: curl -f https://staging.yourdomain.com/health
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/
          
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Build files ready in build/ directory"
          # Add your production deployment commands here
          
      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add production smoke tests here
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸŽ‰ Production deployment successful!"
          echo "Application is live and healthy"